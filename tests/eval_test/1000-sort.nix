let
  # From lib/lists.nix
  mySort = with builtins;
    strictLess: list:
    let
      len = length list;
      first = head list;
      pivot' = n: acc@{ left, right }: let el = elemAt list n; next = pivot' (n + 1); in
        if n == len
          then acc
        else if strictLess first el
          then next { inherit left; right = [ el ] ++ right; }
        else
          next { left = [ el ] ++ left; inherit right; };
      pivot = pivot' 1 { left = []; right = []; };
    in
      if len < 2 then list
      else (mySort strictLess pivot.left) ++  [ first ] ++  (mySort strictLess pivot.right);

  sort1 = mySort builtins.lessThan;
  # sort2 = builtins.sort builtins.lessThan;

  # 10
  xs1 = [1 7 6 5 7 1 8 5 9 3];
  # 20
  xs2 = [10 12 4 16 14 16 10 9 18 13 18 5 2 5 16 20 19 18 11 16];
  # 100
  xs3 = [50 7 75 66 21 4 63 81 99 32 26 81 47 14 46 40 4 11 4 66 25 72 72 77 44 35 50 60 65 49 84 46 52 1 86 35 66 93 99 20 5 95 18 22 85 77 48 75 27 92 91 72 10 29 14 9 68 97 5 99 20 75 20 69 71 46 90 25 68 33 51 84 46 12 24 30 72 66 23 45 63 9 15 28 75 59 93 95 55 55 82 80 45 78 80 14 28 48 17 2];
  # 1000
  xs4 = [489 712 465 137 455 553 723 528 60 103 13 803 917 206 136 168 988 533 598 907 600 407 918 246 274 681 937 753 17 429 135 91 183 651 413 510 579 323 133 318 982 928 278 274 653 378 267 590 149 747 987 436 232 642 129 316 168 982 710 403 64 960 816 175 993 186 395 150 53 824 951 893 900 410 602 602 751 564 15 764 569 150 298 305 272 141 569 70 475 331 395 5 399 346 379 997 267 713 534 784 34 379 130 971 121 674 53 58 46 534 696 874 645 947 843 401 200 125 928 948 269 265 104 295 825 939 65 365 516 536 563 886 751 180 718 634 523 459 27 839 314 538 619 133 524 890 674 2 645 931 677 13 604 1000 426 370 465 931 340 70 667 974 456 564 153 323 739 581 677 706 177 569 993 838 281 620 789 572 929 834 181 648 927 862 249 110 129 940 115 98 890 935 871 849 129 939 969 15 975 63 310 922 305 85 787 711 777 674 602 119 319 594 417 823 745 765 83 262 523 38 106 540 536 735 430 524 606 79 415 77 511 377 620 181 18 935 174 260 393 836 700 816 897 50 175 240 455 501 284 818 890 13 137 882 123 304 105 497 781 985 728 681 239 941 628 901 221 937 653 708 567 278 637 547 204 559 355 710 560 92 993 155 207 994 646 557 502 167 88 993 745 865 51 160 423 164 996 512 388 67 77 735 901 86 321 668 510 168 680 632 185 503 453 817 115 975 516 189 253 910 922 541 740 589 633 510 211 947 535 492 402 57 604 595 442 344 818 138 896 307 39 892 742 34 861 240 941 608 410 13 471 30 293 565 11 641 888 389 626 138 259 351 980 175 314 893 98 878 665 911 469 448 249 788 329 173 585 716 614 756 872 345 940 152 253 49 40 814 597 183 619 860 577 263 828 239 650 803 568 828 175 973 155 953 24 90 608 107 402 109 375 641 88 297 257 545 213 670 94 313 457 849 520 729 492 228 964 91 874 704 646 993 103 542 323 902 221 891 334 326 386 465 950 7 719 322 395 211 37 108 658 474 837 733 548 466 79 231 991 85 655 390 735 32 389 727 230 988 946 598 476 659 348 524 442 211 870 770 327 872 319 473 880 714 726 228 775 818 640 884 215 792 685 354 2 622 947 396 615 525 379 978 531 269 681 439 376 245 944 731 659 729 615 949 190 756 412 387 945 492 930 10 925 508 539 350 720 334 702 241 768 372 805 796 204 127 220 862 150 485 525 686 718 590 451 369 276 306 845 450 478 168 243 208 302 349 483 996 26 139 838 267 337 930 673 393 374 85 264 438 702 396 483 400 375 879 892 388 743 767 309 238 718 96 811 297 915 894 828 354 862 508 97 45 414 60 431 669 903 135 975 922 377 338 798 829 616 922 777 200 942 498 641 489 922 139 695 35 689 66 306 172 171 865 951 897 20 441 432 29 711 817 492 668 616 119 284 14 99 111 111 948 987 973 638 340 737 409 739 647 140 303 235 974 537 637 802 972 612 737 174 664 73 528 141 563 912 480 973 547 783 375 938 640 501 851 120 668 300 665 375 744 114 770 397 75 273 820 55 366 538 601 627 193 994 488 23 510 936 252 982 349 759 318 110 694 543 836 806 880 908 203 71 68 575 801 961 438 154 952 914 522 978 882 437 432 848 51 365 504 431 360 920 830 728 349 681 235 896 893 967 366 268 352 404 733 432 259 246 672 551 48 655 534 675 596 753 161 700 529 329 327 725 772 907 860 732 983 20 951 421 72 952 569 616 72 210 633 170 447 697 254 424 870 301 280 944 174 291 252 876 862 317 633 884 862 91 579 670 789 791 548 349 374 803 60 199 992 395 200 656 486 384 869 308 417 643 701 277 842 949 605 811 992 159 773 180 417 505 804 44 625 915 400 212 548 737 916 575 701 485 8 909 207 138 753 700 197 691 736 711 960 165 605 613 960 246 355 605 248 833 637 218 969 300 778 827 531 347 913 447 110 730 948 999 464 411 180 175 893 291 17 919 685 648 526 48 82 213 132 253 438 185 368 536 867 688 650 12 137 552 674 461 859 176 994 439 607 28 158 606 669 375 949 99 405 180 415 729 618 143 743 380 704 498 320 708 279 261 491 343 432 428 650 76 890 464 931 913 169 432 667 491 204 867 416 864 789 925 774 672 300 384 931 805 2 81 694 739 219 20 992 228 764 378 250 945 627 23 235 392 947 176 742 950 852 250 80 212 667 303 816 791 730 659 420 88 957 90 818 65 186 811 399 930 19 261 549 234 698];
in xs4

in [
  (sort1 xs1)
  # (sort2 xs1)
  (sort1 xs2)
  # (sort2 xs2)
  # FIXME: Stack overflow.
  (sort1 xs3)
  # (sort2 xs3)
  (sort1 xs4)
  # (sort2 xs4)
]
